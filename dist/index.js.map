{
  "version": 3,
  "sources": ["../src/redux/index.ts", "../src/redux/store.ts", "../src/redux/reducers/demoSlice.ts", "../src/util/misc.ts", "../src/redux/hooks.ts", "../src/util/index.ts", "../src/configuration/index.ts", "../src/index.ts"],
  "sourcesContent": ["export * from './store'\nexport * from './hooks'", "import { configureStore } from \"@reduxjs/toolkit\";\nimport { DemoSlice, _demoActions, demoSlice } from \"./reducers/demoSlice\";\nexport type { DemoSlice } from \"./reducers/demoSlice\"; \n\nexport interface ApplicationState {\n    demo: DemoSlice;\n}\n\nexport const store = configureStore({\n    reducer: {\n        demo: demoSlice.reducer,\n    },\n});\n\n/** Export actions for each reduce */\nexport const demoActions = _demoActions;\n\n// Export Rootstate and Dispatch types\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// Add debug panel func to console\n// window.debugPanel = () => store.dispatch(debugActions.toggleDebugPanel());\n", "import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { ApplicationState } from \"../store\";\nimport { sleep } from \"../../util/misc\";\n\nexport interface DemoSlice {\n    testBool: boolean;\n    testStrArr: string[];\n    testString: string;\n}\n\nconst initialDemoState: DemoSlice = {\n    testBool: false,\n    testStrArr: [\"a\", \"b\"],\n    testString: \"testing_string\",\n};\n\n/////////////////////\n// Reducer Thunks //\n///////////////////\n\n// Thunk actions should only resolve, do not resolve with rejection -- Handle in builder.addCase to reduce cases\n\nconst demoSlice_asyncDemoThunk = createAsyncThunk<\n    string,\n    void,\n    { state: ApplicationState }\n>(\"/registration/requestRegistration\", async (_, thunkApi) => {\n    const state: ApplicationState = thunkApi.getState(); // If needed for async calls, etc\n    await sleep(4000);\n    const res = \"some_string\" + state.demo.testString;\n    return res;\n});\n\n////////////////////\n// Reducer Slice //\n//////////////////\n\nexport const demoSlice = createSlice({\n    name: \"demo\",\n    initialState: initialDemoState,\n    reducers: {\n        toggleTestBool: (state: DemoSlice) => {\n            state.testBool = !state.testBool;\n        },\n        updateTestString: (\n            state: DemoSlice,\n            { payload }: { payload: string }\n        ) => {\n            state.testString = payload;\n        },\n        resetState: <Key extends keyof DemoSlice>(state: DemoSlice) => {\n            Object.keys(state).forEach((key) => {\n                state[key as Key] = initialDemoState[key as Key];\n            });\n        },\n    },\n    extraReducers: (builder) => {\n        builder.addCase(\n            demoSlice_asyncDemoThunk.fulfilled,\n            (state, { payload }) => {\n                state.testString = payload;\n            }\n        );\n    },\n});\n\nexport const _demoActions = { ...demoSlice.actions, demoSlice_asyncDemoThunk };\n", "export const sleep = async (ms: number) =>\n    new Promise((res) => setTimeout(res, ms));\n", "import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { type RootState, type AppDispatch, type ApplicationState } from './store';\nimport { DemoSlice } from './reducers/demoSlice';\n\n// Use throughout app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n// Pure Selectors\nexport const extractDemoSlice = (state: ApplicationState): DemoSlice => state.demo;", "export * as misc from \"./misc\"; ", "export const coolAppConfiguration = {\n    testConfigEntry: \"testConfigEntry\"\n}", "export * as redux from \"./redux/index\";\nexport * as util from \"./util/index\";\nexport * as config from \"./configuration/index\";\nexport * as demoSDK from \"demo-api-sdk\";\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,SAAS,sBAAsB;;;ACA/B,SAAS,kBAAkB,mBAAmB;;;ACA9C;AAAA;AAAA;AAAA;AAAO,IAAM,QAAQ,OAAO,OACxB,IAAI,QAAQ,CAAC,QAAQ,WAAW,KAAK,EAAE,CAAC;;;ADS5C,IAAM,mBAA8B;AAAA,EAChC,UAAU;AAAA,EACV,YAAY,CAAC,KAAK,GAAG;AAAA,EACrB,YAAY;AAChB;AAQA,IAAM,2BAA2B,iBAI/B,qCAAqC,OAAO,GAAG,aAAa;AAC1D,QAAM,QAA0B,SAAS,SAAS;AAClD,QAAM,MAAM,GAAI;AAChB,QAAM,MAAM,gBAAgB,MAAM,KAAK;AACvC,SAAO;AACX,CAAC;AAMM,IAAM,YAAY,YAAY;AAAA,EACjC,MAAM;AAAA,EACN,cAAc;AAAA,EACd,UAAU;AAAA,IACN,gBAAgB,CAAC,UAAqB;AAClC,YAAM,WAAW,CAAC,MAAM;AAAA,IAC5B;AAAA,IACA,kBAAkB,CACd,OACA,EAAE,QAAQ,MACT;AACD,YAAM,aAAa;AAAA,IACvB;AAAA,IACA,YAAY,CAA8B,UAAqB;AAC3D,aAAO,KAAK,KAAK,EAAE,QAAQ,CAAC,QAAQ;AAChC,cAAM,GAAU,IAAI,iBAAiB,GAAU;AAAA,MACnD,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,eAAe,CAAC,YAAY;AACxB,YAAQ;AAAA,MACJ,yBAAyB;AAAA,MACzB,CAAC,OAAO,EAAE,QAAQ,MAAM;AACpB,cAAM,aAAa;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AACJ,CAAC;AAEM,IAAM,eAAe,EAAE,GAAG,UAAU,SAAS,yBAAyB;;;AD1DtE,IAAM,QAAQ,eAAe;AAAA,EAChC,SAAS;AAAA,IACL,MAAM,UAAU;AAAA,EACpB;AACJ,CAAC;AAGM,IAAM,cAAc;;;AGf3B,SAA+B,aAAa,mBAAmB;AAKxD,IAAM,iBAAoC;AAC1C,IAAM,iBAAkD;AAGxD,IAAM,mBAAmB,CAAC,UAAuC,MAAM;;;ACT9E;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAO,IAAM,uBAAuB;AAAA,EAChC,iBAAiB;AACrB;;;ACCA,YAAY,aAAa;",
  "names": []
}
